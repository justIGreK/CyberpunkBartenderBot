// Code generated by MockGen. DO NOT EDIT.
// Source: bot.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	models "JillBot/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockBotSrv is a mock of BotSrv interface.
type MockBotSrv struct {
	ctrl     *gomock.Controller
	recorder *MockBotSrvMockRecorder
}

// MockBotSrvMockRecorder is the mock recorder for MockBotSrv.
type MockBotSrvMockRecorder struct {
	mock *MockBotSrv
}

// NewMockBotSrv creates a new mock instance.
func NewMockBotSrv(ctrl *gomock.Controller) *MockBotSrv {
	mock := &MockBotSrv{ctrl: ctrl}
	mock.recorder = &MockBotSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBotSrv) EXPECT() *MockBotSrvMockRecorder {
	return m.recorder
}

// DeleteReminder mocks base method.
func (m *MockBotSrv) DeleteReminder(ctx context.Context, chatID int64, msgText string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteReminder", ctx, chatID, msgText)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteReminder indicates an expected call of DeleteReminder.
func (mr *MockBotSrvMockRecorder) DeleteReminder(ctx, chatID, msgText interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteReminder", reflect.TypeOf((*MockBotSrv)(nil).DeleteReminder), ctx, chatID, msgText)
}

// DeleteTimezone mocks base method.
func (m *MockBotSrv) DeleteTimezone(ctx context.Context, chatID int64) bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimezone", ctx, chatID)
	ret0, _ := ret[0].(bool)
	return ret0
}

// DeleteTimezone indicates an expected call of DeleteTimezone.
func (mr *MockBotSrvMockRecorder) DeleteTimezone(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimezone", reflect.TypeOf((*MockBotSrv)(nil).DeleteTimezone), ctx, chatID)
}

// GetListByPage mocks base method.
func (m *MockBotSrv) GetListByPage(chatID int64, page int) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetListByPage", chatID, page)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetListByPage indicates an expected call of GetListByPage.
func (mr *MockBotSrvMockRecorder) GetListByPage(chatID, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetListByPage", reflect.TypeOf((*MockBotSrv)(nil).GetListByPage), chatID, page)
}

// GetTimezone mocks base method.
func (m *MockBotSrv) GetTimezone(ctx context.Context, chatID int64) (models.ChatTimezone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimezone", ctx, chatID)
	ret0, _ := ret[0].(models.ChatTimezone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimezone indicates an expected call of GetTimezone.
func (mr *MockBotSrvMockRecorder) GetTimezone(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimezone", reflect.TypeOf((*MockBotSrv)(nil).GetTimezone), ctx, chatID)
}

// GetUpcomingReminders mocks base method.
func (m *MockBotSrv) GetUpcomingReminders(ctx context.Context) ([]models.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingReminders", ctx)
	ret0, _ := ret[0].([]models.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingReminders indicates an expected call of GetUpcomingReminders.
func (mr *MockBotSrvMockRecorder) GetUpcomingReminders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingReminders", reflect.TypeOf((*MockBotSrv)(nil).GetUpcomingReminders), ctx)
}

// GetUserPage mocks base method.
func (m *MockBotSrv) GetUserPage(ctx context.Context, chatID int64) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPage", ctx, chatID)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetUserPage indicates an expected call of GetUserPage.
func (mr *MockBotSrvMockRecorder) GetUserPage(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPage", reflect.TypeOf((*MockBotSrv)(nil).GetUserPage), ctx, chatID)
}

// HelpCommand mocks base method.
func (m *MockBotSrv) HelpCommand() (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "HelpCommand")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// HelpCommand indicates an expected call of HelpCommand.
func (mr *MockBotSrvMockRecorder) HelpCommand() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HelpCommand", reflect.TypeOf((*MockBotSrv)(nil).HelpCommand))
}

// MarkReminderAsSent mocks base method.
func (m *MockBotSrv) MarkReminderAsSent(ctx context.Context, chatID int64, id string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkReminderAsSent", ctx, chatID, id)
	ret0, _ := ret[0].(error)
	return ret0
}

// MarkReminderAsSent indicates an expected call of MarkReminderAsSent.
func (mr *MockBotSrvMockRecorder) MarkReminderAsSent(ctx, chatID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkReminderAsSent", reflect.TypeOf((*MockBotSrv)(nil).MarkReminderAsSent), ctx, chatID, id)
}

// RemindMe mocks base method.
func (m *MockBotSrv) RemindMe(chatID int64, msgText string, tz models.ChatTimezone) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemindMe", chatID, msgText, tz)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemindMe indicates an expected call of RemindMe.
func (mr *MockBotSrvMockRecorder) RemindMe(chatID, msgText, tz interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemindMe", reflect.TypeOf((*MockBotSrv)(nil).RemindMe), chatID, msgText, tz)
}

// SetTimezone mocks base method.
func (m *MockBotSrv) SetTimezone(ctx context.Context, chatID int64, lat, long float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetTimezone", ctx, chatID, lat, long)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetTimezone indicates an expected call of SetTimezone.
func (mr *MockBotSrvMockRecorder) SetTimezone(ctx, chatID, lat, long interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetTimezone", reflect.TypeOf((*MockBotSrv)(nil).SetTimezone), ctx, chatID, lat, long)
}

// SetUserPage mocks base method.
func (m *MockBotSrv) SetUserPage(ctx context.Context, chatID int64, page int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserPage", ctx, chatID, page)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserPage indicates an expected call of SetUserPage.
func (mr *MockBotSrvMockRecorder) SetUserPage(ctx, chatID, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserPage", reflect.TypeOf((*MockBotSrv)(nil).SetUserPage), ctx, chatID, page)
}
