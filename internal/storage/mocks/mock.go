// Code generated by MockGen. DO NOT EDIT.
// Source: reminders.go

// Package mock_storage is a generated GoMock package.
package mock_storage

import (
	models "JillBot/internal/models"
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockStore is a mock of Store interface.
type MockStore struct {
	ctrl     *gomock.Controller
	recorder *MockStoreMockRecorder
}

// MockStoreMockRecorder is the mock recorder for MockStore.
type MockStoreMockRecorder struct {
	mock *MockStore
}

// NewMockStore creates a new mock instance.
func NewMockStore(ctrl *gomock.Controller) *MockStore {
	mock := &MockStore{ctrl: ctrl}
	mock.recorder = &MockStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStore) EXPECT() *MockStoreMockRecorder {
	return m.recorder
}

// AddReminder mocks base method.
func (m *MockStore) AddReminder(ctx context.Context, reminder models.Reminder) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddReminder", ctx, reminder)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddReminder indicates an expected call of AddReminder.
func (mr *MockStoreMockRecorder) AddReminder(ctx, reminder interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddReminder", reflect.TypeOf((*MockStore)(nil).AddReminder), ctx, reminder)
}

// AddTimezone mocks base method.
func (m *MockStore) AddTimezone(ctx context.Context, chatID int64, lat, long float64, diffhour int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddTimezone", ctx, chatID, lat, long, diffhour)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddTimezone indicates an expected call of AddTimezone.
func (mr *MockStoreMockRecorder) AddTimezone(ctx, chatID, lat, long, diffhour interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddTimezone", reflect.TypeOf((*MockStore)(nil).AddTimezone), ctx, chatID, lat, long, diffhour)
}

// DeleteTimezone mocks base method.
func (m *MockStore) DeleteTimezone(ctx context.Context, chatID int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteTimezone", ctx, chatID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteTimezone indicates an expected call of DeleteTimezone.
func (mr *MockStoreMockRecorder) DeleteTimezone(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteTimezone", reflect.TypeOf((*MockStore)(nil).DeleteTimezone), ctx, chatID)
}

// GetReminders mocks base method.
func (m *MockStore) GetReminders(ctx context.Context, chatID int64) ([]models.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetReminders", ctx, chatID)
	ret0, _ := ret[0].([]models.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetReminders indicates an expected call of GetReminders.
func (mr *MockStoreMockRecorder) GetReminders(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetReminders", reflect.TypeOf((*MockStore)(nil).GetReminders), ctx, chatID)
}

// GetTimezone mocks base method.
func (m *MockStore) GetTimezone(ctx context.Context, chatID int64) (models.ChatTimezone, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTimezone", ctx, chatID)
	ret0, _ := ret[0].(models.ChatTimezone)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTimezone indicates an expected call of GetTimezone.
func (mr *MockStoreMockRecorder) GetTimezone(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTimezone", reflect.TypeOf((*MockStore)(nil).GetTimezone), ctx, chatID)
}

// GetUpcomingReminders mocks base method.
func (m *MockStore) GetUpcomingReminders(ctx context.Context) ([]models.Reminder, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUpcomingReminders", ctx)
	ret0, _ := ret[0].([]models.Reminder)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUpcomingReminders indicates an expected call of GetUpcomingReminders.
func (mr *MockStoreMockRecorder) GetUpcomingReminders(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUpcomingReminders", reflect.TypeOf((*MockStore)(nil).GetUpcomingReminders), ctx)
}

// GetUserPage mocks base method.
func (m *MockStore) GetUserPage(ctx context.Context, chatID int64) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPage", ctx, chatID)
	ret0, _ := ret[0].(int)
	return ret0
}

// GetUserPage indicates an expected call of GetUserPage.
func (mr *MockStoreMockRecorder) GetUserPage(ctx, chatID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPage", reflect.TypeOf((*MockStore)(nil).GetUserPage), ctx, chatID)
}

// MarkReminderAsInactive mocks base method.
func (m *MockStore) MarkReminderAsInactive(ctx context.Context, chatID int64, id string) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MarkReminderAsInactive", ctx, chatID, id)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// MarkReminderAsInactive indicates an expected call of MarkReminderAsInactive.
func (mr *MockStoreMockRecorder) MarkReminderAsInactive(ctx, chatID, id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MarkReminderAsInactive", reflect.TypeOf((*MockStore)(nil).MarkReminderAsInactive), ctx, chatID, id)
}

// SetUserPage mocks base method.
func (m *MockStore) SetUserPage(ctx context.Context, chatID int64, page int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetUserPage", ctx, chatID, page)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetUserPage indicates an expected call of SetUserPage.
func (mr *MockStoreMockRecorder) SetUserPage(ctx, chatID, page interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetUserPage", reflect.TypeOf((*MockStore)(nil).SetUserPage), ctx, chatID, page)
}

// UpdateTimezone mocks base method.
func (m *MockStore) UpdateTimezone(ctx context.Context, chatID int64, lat, long float64, diffhour int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateTimezone", ctx, chatID, lat, long, diffhour)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateTimezone indicates an expected call of UpdateTimezone.
func (mr *MockStoreMockRecorder) UpdateTimezone(ctx, chatID, lat, long, diffhour interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateTimezone", reflect.TypeOf((*MockStore)(nil).UpdateTimezone), ctx, chatID, lat, long, diffhour)
}
